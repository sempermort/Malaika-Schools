@page "/Admissions/Index"
@inherits OwningComponentBase<StudentsService>


@*@if (Classes.Count > 0)
{
    <div class="d-flex justify-content-around">
        <div class="form-group w-25">
            <label for="StudentClass" class="control-label">Student Class</label>
            <div class="d-flex">
                <select class="form-control" @oninput="(e => SomeMethod(e))" @bind="@StudentClassId">
                    <option value="0">Class Room</option>

                    @if (Classes != null)
                    {
                        @foreach (var stc in Classes)
                        {
                            <option value="@stc.Id">@stc.ClassName</option>
                        }
                    }
                </select>

            </div>
        </div>


        <div class="form-group w-25">
            <label for="StudentClass" class="control-label">Subject</label>
            <div class="d-flex">
                <select class="form-control" @oninput="(e => SomeMethod2(e))" @bind="@ClassSubjectId">
                    <option value="0">Select Subject</option>

                    @if (ClassSubject != null)
                    {
                        @foreach (var stc in ClassSubject)
                        {
                            <option value="@stc.Id">@stc.Name  Code: @stc.Code</option>
                        }
                    }
                </select>

            </div>
        </div>
        <div class="form-group w-25">
            <label for="StudentClass" class="control-label">Admissions</label>
            <div class="d-flex">
                <select class="form-control" @oninput="(e => SomeMethod3(e))" @bind="@AdmissionTitleId">
                    <option value="0">Select Admissions</option>

                    @if (ETitles != null)
                    {
                        @foreach (var stc in ETitles)
                        {
                            <option value="@stc.Id">@stc.ExType</option>
                        }
                    }
                </select>

            </div>
        </div>
    </div>
    }*@




<table id="" class="table b-datagrid">
    <thead>
        <tr>
            <th><button type="button" class="btn btn-success" data-toggle="modal" data-target="#NewMark">New</button></th>
            <th style="cursor: pointer">Name</th>
            <th style="cursor: pointer">Marks</th>
            <th style="cursor: pointer">Grade</th>

            <th style="cursor: pointer">
                Student Name
            </th>
            <th style="cursor: pointer">
                Admission Date
            </th>
            <th style="cursor: pointer">
                Session
            </th>
            <th style="cursor: pointer">
                Previous School
            </th>
            <th style="cursor: pointer">
                Previous School Address
            </th>
            <th style="cursor: pointer">
                PreviousSchoolDocument
            </th>
        </tr>
        <tr>
            <th scope="col"><button type="button" class="btn btn-link">Clear Filter</button></th>
            <th scope="col"><input type="text" class="form-control"></th>
            <th scope="col"><input type="text" class="form-control"></th>
            <th scope="col"><input type="text" class="form-control"></th>
        </tr>
    </thead>
    <tbody>

        @foreach (var item in Model)
        {

        <tr>
            <td></td>
            <td>
                @item.Students.Select(n => n.Name)
            </td>
            <td>
                @item.AdmissionDate
            </td>
            <td>
                @item.Session.Name
            </td>
            <td>
                @item.PreviousSchool
            </td>
            <td>
                @item.PreviousSchoolAddrs
            </td>
            <td>
                @if (item.PreviousSchoolDocument != null)
                {
                    var base64 = Convert.ToBase64String(item.PreviousSchoolDocument);
                    var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                    <img src='@imgSrc' style="max-width:100px; max-height:100px;" />
                }
            </td>

            <td>
                <button class=" btn btn-primary"  @onclick="() => show(item)" data-toggle="modal" data-target="#GuardianTypeModal">Edit</button>
                <button class=" btn btn-info" @onclick="() => ShowDetails(item)" data-toggle="modal" data-target="#GuardianTypeModal1">Details</button>
                <button class=" btn btn-danger"  @onclick="() => ClickDeleted(item)" data-toggle="modal" data-target="#GuardianTypeModal2">Delete</button>
            </td>


        </tr>



        }
    </tbody>
</table>

@*@if (ShowConfirmation)
{
    <div class="modal fade show d-block" id="edited" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="AdmissionpleModalLabel">Edit</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                            @onclick="() => NoShow()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <Edit ModelEdt="@pepaEd" ConfirmationChanged="ConfirmEdit_Click" />
            </div>
        </div>
    </div>
}



<Details @ref="ShowingDetails" ModelAdm="pepaDet"></Details>

<ConfirmDelete @ref="DeletedConfirmation" ConfirmationChanged="ConfirmDeleteAdm_Click"
               ConfirmationMessage=@($"Are you sure you want to delete Student : \"{pepaDet.StudentId}\"")>
</ConfirmDelete>*@

@code {
    private List<StudentClass> Classes = new List<StudentClass>();
    private List<Admission> Model = new List<Admission>();

    //initial view
    protected override async Task OnInitializedAsync()
    {
        Model = await Service.AdmissionIndex();
        Classes = await Service.StudentClassIndex();
    }

    protected MalaikaSchool.Shared.ConfirmDelete DeletedConfirmation { get; set; }
    protected bool ShowConfirmation { get; set; } = false;
    private Admission pepaDel = new Admission();
    private Admission pepaDet = new Admission();
    private Admission pepaEd = new Admission();

    //show Edit Dialog
    private void show(Admission pep)
    {
        pepaEd = pep;
        ShowConfirmation = true;
        StateHasChanged();
    }
    //close Edit Dialog
    private void NoShow()
    {
        ShowConfirmation = false;
        StateHasChanged();
    }
    //show Details
    public void ShowDetails(Admission pep)
    {
        pepaDet = pep;
        //ShowingDetails.Showing();

    }

    //Show delete dialog
    private void ClickDeleted(Admission pep)
    {
        pepaDel = pep;
        DeletedConfirmation.Show();
        StateHasChanged();
    }

    //Confirm Deletion
    protected async Task ConfirmDeleteAdm_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await Service.AdmissionDeleteConfirmed(pepaDel.Id);
            Model = await Service.AdmissionIndex();
        }
    }

    //Confirm Edition
    protected async Task ConfirmEdit_Click(bool value)
    {
        ShowConfirmation = value;
        Model = await Service.AdmissionIndex();

    }

}