@page "/Exam/Index"
@inherits OwningComponentBase<StudentsService>


@if (Model != null)
{


    <table id="" class="table b-datagrid">
        <thead>
            <tr>
                <th><button type="button" class="btn btn-success" data-toggle="modal" data-target="#GuardianTypeModal2">New</button></th>
                <th style="cursor: pointer">Name</th>
                <th style="cursor: pointer">Marks</th>
                <th style="cursor: pointer">Grade</th>
            </tr>
            <tr>
                <th scope="col"><button type="button" class="btn btn-link">Clear Filter</button></th>
                <th scope="col"><input type="text" class="form-control"></th>
                <th scope="col"><input type="text" class="form-control"></th>
                <th scope="col"><input type="text" class="form-control"></th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>


}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}


<div class="modal fade" id="GuardianTypeModal2" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content p-2">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add Mark</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <Create/>
        </div>
    </div>
</div>

@code {

    private List<Exam> Model;

    private List<Student> Students = new List<Student>();


    protected override async Task OnInitializedAsync()
    {
        Model = await Service.ExamIndex();
        Students = await Service.Index();
    }

    private async Task OnRowInserted(SavedRowItem<Exam, Dictionary<string, object>> e)
    {
        //Save
        Exam ExamM = new Exam();
        ExamM = e.Item;
        foreach (var ele in e.Values)
        {
            var k = (int)ele.Value;

            ExamM.StudentId = k;
        }
        await Service.CreateExam(ExamM);
        Model = await Service.ExamIndex();
        StateHasChanged();
    }

    private async Task OnRowUpdated(SavedRowItem<Exam, Dictionary<string, object>> e)
    {
        //Update
        var ExamM = e.Item;
        await Service.EditExam(ExamM);
        Model = await Service.ExamIndex();
        StateHasChanged();
    }
    private async Task OnRowRemoved(Exam Exam)
    {
        //Delete
        await Service.ExamDeleteConfirmed(Exam.Id);
        Model = await Service.ExamIndex();
        StateHasChanged();
    }
    private void OnNewItemDefaultSetter(Exam Exam)
    {
        //Default Value Set
        StateHasChanged();

    }


}
