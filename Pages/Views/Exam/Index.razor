@page "/Exam/Index"
@inherits OwningComponentBase<StudentsService>


@if (Classes.Count > 0)
{
    <div class="d-flex justify-content-around">
        <div class="form-group w-25">
            <label for="StudentClass" class="control-label">Student Class</label>
            <div class="d-flex">
                <select class="form-control" @oninput="(e => SomeMethod(e))" @bind="@StudentClassId">
                    <option value="0">Class Room</option>

                    @if (Classes != null)
                    {
                        @foreach (var stc in Classes)
                        {
                            <option value="@stc.Id">@stc.ClassName</option>
                        }
                    }
                </select>

            </div>
        </div>


        <div class="form-group w-25">
            <label for="StudentClass" class="control-label">Subject</label>
            <div class="d-flex">
                <select class="form-control" @oninput="(e => SomeMethod2(e))" @bind="@ClassSubjectId">
                    <option value="0">Select Subject</option>

                    @if (ClassSubject != null)
                    {
                        @foreach (var stc in ClassSubject)
                        {
                            <option value="@stc.Id">@stc.Name  Code: @stc.Code</option>
                        }
                    }
                </select>

            </div>
        </div>
        <div class="form-group w-25">
            <label for="StudentClass" class="control-label">Exams</label>
            <div class="d-flex">
                <select class="form-control" @oninput="(e => SomeMethod3(e))" @bind="@ExamTitleId">
                    <option value="0">Select Exams</option>

                    @if (ETitles != null)
                    {
                        @foreach (var stc in ETitles)
                        {
                            <option value="@stc.Id">@stc.ExType</option>
                        }
                    }
                </select>

            </div>
        </div>
    </div>
}




    <table id="" class="table b-datagrid">
        <thead>
            <tr>
                <th><button type="button" class="btn btn-success" data-toggle="modal" data-target="#GuardianTypeModal2">New</button></th>
                <th style="cursor: pointer">Name</th>
                <th style="cursor: pointer">Marks</th>
                <th style="cursor: pointer">Grade</th>
            </tr>
            <tr>
                <th scope="col"><button type="button" class="btn btn-link">Clear Filter</button></th>
                <th scope="col"><input type="text" class="form-control"></th>
                <th scope="col"><input type="text" class="form-control"></th>
                <th scope="col"><input type="text" class="form-control"></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var item in Model)
            {

                <tr>
                    <td></td>
                    <td>
                        @item.Student.Name
                    </td>

                    <td>
                        @item.Mark
                    </td>

                    <td>
                        @item.Grade
                    </td>

                    <td>
                        <NavLink class=" btn btn-primary" href="@($"/Exam/Edit/{item.Id}")" @OnClick="show" data-toggle="modal" data-target="#GuardianTypeModal">Edit</NavLink>
                        <NavLink class=" btn btn-info" href="@($"/Exam/Details/{item.Id}")"  @OnClick="show2" data-toggle="modal" data-target="#GuardianTypeModal1">Details</NavLink>
                        <NavLink class=" btn btn-danger" href="@($"/Exam/Delete/{item.Id}")" data-toggle="modal" data-target="#GuardianTypeModal2">Delete</NavLink>
                    </td>


                </tr>
                if (ShowConfirmation)
                {
                    <div class="modal fade" id="GuardianTypeModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content p-2">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="exampleModalLabel">Add Mark</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <Edit Model="@item" />
                            </div>
                        </div>
                    </div>
                }
                if (ShowConfirmation2) { 
                <div class="modal fade" id="GuardianTypeModal1" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content p-2">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Add Mark</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <Details remodel="@item  />
                        </div>
                    </div>
                </div>
                }
                }
            </tbody>
    </table>





@code {

    private List<ExamType> ETitles;
    private List<Exam> Model;
    private List<Subject> ClassSubject;
    private int ClassSubjectId;
    private int StudentClassId;
    private int ExamTitleId;
    private List<StudentClass> Classes = new List<StudentClass>();
    int idDetailed;
    protected bool ShowConfirmation { get; set; }
    protected bool ShowConfirmation2 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await Service.ExamIndex();
        ETitles = await Service.ExamTypeIndex();
        Classes = await Service.StudentClassIndex();
    }
    public void Show()
    {
        ShowConfirmation = true;
        StateHasChanged();
    }
    public void ShowDetails()
    {
        ShowConfirmation2 = true;
        StateHasChanged();
    }

    private async Task OnRowRemoved(Exam Exam)
    {
        //Delete
        await Service.ExamDeleteConfirmed(Exam.Id);
        Model = await Service.ExamIndex();
        StateHasChanged();
    }
    private void OnNewItemDefaultSetter(Exam Exam)
    {
        //Default Value Set
        StateHasChanged();

    }

    protected async Task ConfirmEdit_Click()
    {
        Model = await Service.ExamIndex();

    }
    protected async Task SomeMethod(ChangeEventArgs e)
    {
        ExamTitleId = 0;
        ClassSubjectId = 0;
        var subjects = await Service.SubjectIndex();
        ClassSubject = subjects.Where(n => n.StudentClassId == Convert.ToInt32(e.Value)).ToList();

    }

    protected async Task SomeMethod2(ChangeEventArgs e)
    {
        ExamTitleId = 0;
        ClassSubjectId = 0;
        var Exams = await Service.ExamIndex();
        Model = Exams.Where(n => n.SubjectId == Convert.ToInt32(e.Value)).ToList();

    }
    protected void SomeMethod3(ChangeEventArgs e)
    {

        Model = Model.Where(n => n.ExamTypeId == Convert.ToInt32(e.Value)).ToList();

    }

}
