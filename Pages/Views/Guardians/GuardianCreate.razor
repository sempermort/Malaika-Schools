@using MalaikaSchool.Pages.Views.GuardianTypes
@inherits OwningComponentBase<StudentsService>


<div class="">
    <div class="page-header">
        <h1>
            Add Guardian
            <small>
                <i class="ace-icon fa fa-angle-double-right"></i>

                <NavLink href="/Guardians/Index" class="btn btn-warning float-right">Back to List</NavLink>

            </small>
        </h1>
    </div>
    <div class="box box-block bg-white">
        <hr>
        <EditForm OnValidSubmit="@HandleValidSubmit" Model="@Model" Id="GuardianForm" class="col-md-7 m-auto">

            <DataAnnotationsValidator />


            <div class="form-horizontal">
                <ValidationSummary />

                <div class="form-group">
                    <label for="Name" class="control-label">Guardian's Name</label>
                    <InputText for="Name" class="form-control" @bind-Value="@Model.Name" />
                </div>
                <div class="form-group">
                    <label for="Image" class="control-label d-block">Guardians Photo</label>
                    <div class="form-control-file">

                        <img src="@imgUrl" class="img-responsive img-thumbnail">

                    </div>
                    <InputFile type="file" OnChange="@LoadFiles" class="d-block" @bind-Value="@Model.Image" />

                </div>
                <div class="form-group">
                    <label for="Email" class="control-label">Email</label>
                    <InputText for="Email" class="form-control" @bind-Value="@Model.Email" />
                </div>
                <div class="form-group">
                    <label for="StudentId" class="control-label">Student</label>
                    <select for="StudentId" class="form-control" @bind="@Model.StudentId">

                        @if (students != null)
                        {
                            @foreach (var stc in students)
                            {
                                <option value="@stc.Id">@stc.Name</option>
                            }
                        }
                    </select>

                </div>
                @*<div class="form-group">
                        <label for="Phonenumber" class="control-label">Class</label>
                        <InputText for="Phonenumber" class="form-control" @bind-Value="@Model.PhoneNumber" />
                    </div>*@
                <div class="form-group">
                    <label for="NID" class="control-label">NIDA Number</label>
                    <InputText for="NID" class="form-control" @bind-Value="@Model.NID" />
                </div>

                <div class="form-group">
                    <label for="GuardianTypeId" class="control-label">Guardian Type</label>
                    <div class="d-flex">
                        <select for="GuardianTypeId" class="form-control" @bind="@Model.GuardianTypeId">
                            @if (guardianTypes != null)
                            {
                                @foreach (var stc in guardianTypes)
                                {
                                    <option value="@stc.Id">@stc.Name</option>
                                }
                            }
                        </select>
                        <button type="button" class="btn btn-primary" @onclick="showAddtype">
                            <i class="fa fa-plus">  </i>
                        </button>
                    </div>
                </div>


                <div class="form-group float-right">
                    <div class="col-md-offset-4 col-md-8">
                        <small>
                            <input type="submit" class="btn btn-info" value="Save" />
                        </small>
                    </div>
                </div>
            </div>
        </EditForm>

        @if (ShowAddType)
        {
            <div class="modal fade show d-block" id="CreateGuardianType" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Create Guardian Type</h5>
                            <button type="button" class="close" @onclick="NoshowAddtype" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <CreateGuardianType ConfirmTypeAdded="UpdateGuardianType" CloseDialog="NoshowAddtype" />
                        </div>

                    </div>
                </div>
            </div>
        }
    </div>
</div>





@code {
    @inject IHttpContextAccessor httpContextAccessor
    @inject NavigationManager NavigationManager
    @inject UserManager<AppUser> _userManager
    @inject LinkGenerator LinkGenerator
    @inject IEmailSender _emailSender
    @inject RoleManager<IdentityRole> roleManager

    private Guardian Model = new Guardian();
    private List<GuardianType> guardianTypes = new List<GuardianType>();
    private List<Student> students = new List<Student>();
    public bool isLoading;
    string exceptionMessage;
    string imgUrl = string.Empty;
    const int maxFileSize = 10485760;
    private bool ShowAddType = false;
    public List<string> AddIds = new List<string>();


    protected override async Task OnInitializedAsync()
    {

        guardianTypes = await Service.GuardianTypeIndex();
        students = await Service.Index();
    }
    public void showAddtype()
    {
        ShowAddType = true;
    }
    public void NoshowAddtype()
    {
        ShowAddType = false;
    }
    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;

        exceptionMessage = "";

        try
        {

            IBrowserFile imgFile = e.File;
            var buffers = new byte[imgFile.Size];
            using (var stream = imgFile.OpenReadStream(maxFileSize))
            {
                using (var mstream = new MemoryStream())
                {
                    await stream.CopyToAsync(mstream);
                    buffers = mstream.ToArray();
                }
            }
            string imageType = imgFile.ContentType;
            imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";


            Model.Image = buffers;

        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }

        isLoading = false;
    }
    private async Task UpdateGuardianType()
    {
        ShowAddType = false;
        guardianTypes = await Service.GuardianTypeIndex();
    }

    //Submit Data
    public void HandleValidSubmit(EditContext context)
    {

        Guardian Guardian = new Guardian();
        try
        {
            Guardian = Model;

            var result = Service.CreateGuardian(Guardian);
            // Clear the form.
            Model = new Guardian();
            // Show the Toast.

        }
        catch (Exception)
        {
            //ToastContent = ex.GetBaseException().Message;

            //await this.ToastObj.Show();
        }
    }
    private void TakeRol(ChangeEventArgs e)
    {
        if (!AddIds.Contains(e.Value.ToString()))
            AddIds.Add(e.Value.ToString());
    }
    private void RemoRol(string rl)
    {
        AddIds.Remove(rl);
    }

    public async Task Custum_Register()
    {
        var user = new AppUser { UserName = Model.Name, Email = Model.Email };
        var result = await _userManager.CreateAsync(user, DateTime.Now.ToString("MMMM dd"));
        if (result.Succeeded)
        {
            foreach (var rol in AddIds)
            {
                await _userManager.AddToRoleAsync(user, rol);
            }
            //_logger.LogInformation("User created a new account with password.");
            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = LinkGenerator.GetUriByPage(
                httpContextAccessor.HttpContext,
                "/Account/ConfirmEmail",
                 null,
                 new { area = "Identity", userId = user.Id, code = code }
               );

            await _emailSender.SendEmailAsync(Model.Email, "Confirm your email",
                $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

        }
    }

}