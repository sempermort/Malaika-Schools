@page "/Employee/Edit/{Id:int}"
@inherits OwningComponentBase<StudentsService>
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager
@inject UserManager<AppUser> _userManager
@inject LinkGenerator LinkGenerator
@inject IEmailSender _emailSender
@inject RoleManager<IdentityRole> roleManager



<div class="">
    <div class="page-header">
        <h1>
            Edit Employee
            <small>
                <i class="ace-icon fa fa-angle-double-right"></i>

                <NavLink href="/Employee/Index" class="btn btn-warning float-right">Back to List</NavLink>

            </small>
        </h1>
    </div>
    <div class="box box-block bg-white ">
        <EditForm OnValidSubmit="@HandleValidSubmit" Model="@Model" Id="studentForm" class="col-md-7 m-auto">
            <DataAnnotationsValidator />


            <div class="form-horizontal">
                <ValidationSummary />
                <div class="form-group">
                    <label for="Name" class="control-label">Name</label>
                    <InputText for="Name" class="form-control" @bind-Value="@Model.Name" />
                </div>
                <div class="form-group">
                    <label for="Email" class="control-label">Email</label>
                    <InputText type="email" for="Email" class="form-control" @bind-Value="@Model.Email" />
                </div>
                <div class="form-group">
                    <label for="DOB" class="control-label">Date of Birth</label>
                    <InputDate type="date" for="DOB" class="form-control" @bind-Value="@Model.DOB" />
                </div>
                <div class="form-group">
                    <InputSelect for="Religion" class="form-control" @bind-Value="@Model.Religion">
                        <option value="">Religion</option>

                        @foreach (var religion in Enum.GetNames(typeof(Religion)))
                        {

                            <option value="@religion">@religion</option>
                        }

                    </InputSelect>

                </div>
                <div class="form-group">
                    <InputSelect for="MaritalStatus" class="form-control" @bind-Value="@Model.MaritalStatus">
                        <option value="">MaritalStatus </option>

                        @foreach (var Mstatus in Enum.GetNames(typeof(MaritalStatus)))
                        {

                            <option value="@Mstatus">@Mstatus</option>
                        }

                    </InputSelect>

                </div>
                <div class="form-group">
                    <InputSelect for="MaritalStatus" class="form-control" @bind-Value="@Model.Nationality">
                        <option value="">Nationality </option>

                        @foreach (var country in CountryArrays.Names)
                        {

                            <option value="@country">@country</option>
                        }

                    </InputSelect>

                </div>


                <div class="form-group">
                    <label for="NID" class="control-label">NIDA</label>
                    <InputText for="NID" class="form-control" @bind-Value="@Model.NID" />
                </div>
                <div class="form-group">
                    <label for="PresentAddress" class="control-label">Current Address</label>
                    <InputText for="PresentAddress" class="form-control" @bind-Value="@Model.PresentAddress" />
                </div>
                <div class="form-group">
                    <label for="PermanentAddress" class="control-label">Permanent Address</label>
                    <InputText for="PermanentAddress" class="form-control" @bind-Value="@Model.PermanentAddress" />
                </div>

                <div class="form-group">
                    @if (AddIds.Count() > 0)
                    {
                        <div class="d-flex mb-2">

                            @foreach (var rl in AddIds)
                            {
                                <span class="badge badge-light" @onclick="@(e=>RemoRol(rl.ToString()))">@rl.ToString() <span>&times;</span></span>
                            }
                        </div>

                    }

                    <select for="Designation" class="form-control" @onchange="TakeRol">
                        <option value="">Roles </option>

                        @foreach (var rol in roles)
                        {

                            <option value="@rol.Name">@rol.Name</option>
                        }

                    </select>

                </div>

                <div class="form-group">
                    <label for="Image" class="control-label d-block">Staff's Photo</label>
                    <div class="form-control-file">

                        <img src="@imgUrl" class="img-responsive img-thumbnail">

                    </div>
                    <InputFile type="file" OnChange="@LoadFiles" class="d-block" @bind-Value="@Model.Image" />

                </div>

                <div class="form-group ">
                    <input type="submit" class="btn btn-primary float-right" value="Create" />
                </div>
            </div>
        </EditForm>

    </div>
</div>




@code {

    [Parameter]
    public int Id { get; set; }
    public bool isLoading;
    string exceptionMessage;
    string imgUrl = string.Empty;
    const int maxFileSize = 10485760;
    private Employee Model = new Employee();
    public IList<string> AddIds = new List<string>();
    public IdentityRole Role { get; set; }
    private List<IdentityRole> roles;


    protected override async Task OnInitializedAsync()
    {

        roles = roleManager.Roles.ToList();
        Model = await Service.GetEmployee(Id);
        imgUrl = $"data:png;base64,{Convert.ToBase64String(Model.Image)}";
        var user = await _userManager.FindByNameAsync(Model.Name);
        if(user!=null)
            AddIds=( await _userManager.GetRolesAsync(user));
    }
    //Handle Employees photo
    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;

        exceptionMessage = "";

        try
        {

            IBrowserFile imgFile = e.File;
            var buffers = new byte[imgFile.Size];
            using (var stream = imgFile.OpenReadStream(maxFileSize))
            {
                using (var mstream = new MemoryStream())
                {
                    await stream.CopyToAsync(mstream);
                    buffers = mstream.ToArray();
                }
            }
            string imageType = imgFile.ContentType;
            imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";


            Model.Image = buffers;

        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }

        isLoading = false;
    }
    private void TakeRol(ChangeEventArgs e)
    {
        if (!AddIds.Contains(e.Value.ToString()))
            AddIds.Add(e.Value.ToString());
    }
    private void RemoRol(string rl)
    {
        AddIds.Remove(rl);
    }
    public async Task HandleValidSubmit(EditContext context)
    {

        Employee Employee = new Employee();
        try
        {
            Employee = Model;

            var result = Service.CreateEmployee(Employee);

            await Custum_Register();
            if (result != null)
            {
                NavigationManager.NavigateTo("/Employee/Index");
            }

            // Show the Toast.

        }
        catch (Exception)
        {
            //ToastContent = ex.GetBaseException().Message;

            //await this.ToastObj.Show();
        }
    }
    public async Task Custum_Register()
    {
        var user = new AppUser { UserName = Model.Name, Email = Model.Email };
        var result = await _userManager.CreateAsync(user, Model.DOB.ToString("MMMM dd").Trim()+",v1x");
        if (result.Succeeded)
        {
            foreach (var rol in AddIds)
            {
                await _userManager.AddToRoleAsync(user, rol);
            }
            //_logger.LogInformation("User created a new account with password.");
            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = LinkGenerator.GetUriByPage(
                httpContextAccessor.HttpContext,
                "/Account/ConfirmEmail",
                 null,
                 new { area = "Identity", userId = user.Id, code = code }
               );

            await _emailSender.SendEmailAsync(Model.Email, "Confirm your email",
                $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

        }
    }





}